
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002413  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021bc  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024a  00000000  00000000  00004843  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00004a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000108a  00000000  00000000  00004b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d7  00000000  00000000  00005bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00005c8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 6f 00 	call	0xde	; 0xde <main>
  a0:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <add>:
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	26 97       	sbiw	r28, 0x06	; 6
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	9c 83       	std	Y+4, r25	; 0x04
  ba:	6d 83       	std	Y+5, r22	; 0x05
  bc:	7e 83       	std	Y+6, r23	; 0x06
  be:	2b 81       	ldd	r18, Y+3	; 0x03
  c0:	3c 81       	ldd	r19, Y+4	; 0x04
  c2:	8d 81       	ldd	r24, Y+5	; 0x05
  c4:	9e 81       	ldd	r25, Y+6	; 0x06
  c6:	82 0f       	add	r24, r18
  c8:	93 1f       	adc	r25, r19
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	9a 81       	ldd	r25, Y+2	; 0x02
  d2:	26 96       	adiw	r28, 0x06	; 6
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:

#include <avr/io.h>
int add(int,int);
int sub(int,int);
int main()
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x6>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <main+0x8>
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	int a=add(5,3);	
  ea:	63 e0       	ldi	r22, 0x03	; 3
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 54 00 	call	0xa8	; 0xa8 <add>
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	9a 83       	std	Y+2, r25	; 0x02
	
	int c=sub(6,4);
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 8d 00 	call	0x11a	; 0x11a <sub>
 106:	8b 83       	std	Y+3, r24	; 0x03
 108:	9c 83       	std	Y+4, r25	; 0x04
	
	return 0;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
}
 10e:	24 96       	adiw	r28, 0x04	; 4
 110:	cd bf       	out	0x3d, r28	; 61
 112:	de bf       	out	0x3e, r29	; 62
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <sub>:
 * sub.c
 *
 * Created: 21-08-2024 14:57:17
 *  Author: AMALKRISHNA S
 */ 
int sub(int a,int b){
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <sub+0x6>
 120:	00 d0       	rcall	.+0      	; 0x122 <sub+0x8>
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	6b 83       	std	Y+3, r22	; 0x03
 12c:	7c 83       	std	Y+4, r23	; 0x04
	return (a-b);
 12e:	29 81       	ldd	r18, Y+1	; 0x01
 130:	3a 81       	ldd	r19, Y+2	; 0x02
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	9c 81       	ldd	r25, Y+4	; 0x04
 136:	a9 01       	movw	r20, r18
 138:	48 1b       	sub	r20, r24
 13a:	59 0b       	sbc	r21, r25
 13c:	ca 01       	movw	r24, r20
 13e:	24 96       	adiw	r28, 0x04	; 4
 140:	cd bf       	out	0x3d, r28	; 61
 142:	de bf       	out	0x3e, r29	; 62
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
